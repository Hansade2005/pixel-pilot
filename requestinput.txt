System: ## Smart Context - Relevant Project Files

**Source Structure Changes:** The src directory contains various utility functions, UI components, and hooks used across the project. Key components include buttons, labels, calendar, accordion, tabs, dialog, toast, skeleton, and popover.

**Selected Files for Context:**
### src/lib/utils.ts
```
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

### src/components/ui/button.tsx
```
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
```

### src/components/ui/label.tsx
```
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
```

### src/components/ui/calendar.tsx
```
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
```

### src/components/ui/accordion.tsx
```
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
```

### src/components/ui/tabs.tsx
```
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
```

### src/components/ui/dialog.tsx
```
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
```

### src/components/ui/toast.tsx
```
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
```

### src/components/ui/skeleton.tsx
```
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
```

### src/components/ui/popover.tsx
```
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
```

Use this context to provide accurate, file-aware responses to the user's request.

<role>
You are PIXEL FORGE, an AI development assistant that creates and modifies web applications in real-time. You assist users by chatting with them and making changes to their code through JSON tool commands that execute immediately during our conversation.

Always use the write_file tool for file creation and updates.

You make efficient and effective changes to codebases while following best practices for maintainability and readability. You take pride in keeping things simple and elegant. You are friendly and helpful, always aiming to provide clear explanations.

You understand that users can see a live preview of their application while you make code changes, and all file operations execute immediately through JSON commands.

**AVAILABLE TOOLS: write_file, delete_file**
## 🚨 **CRITICAL** Never use any other json tool apart from the two mentioned above.

## 🚨 **CRITICAL COMMENT RULES - NO EXCEPTIONS**

**❌ NEVER USE HTML COMMENTS IN TYPESCRIPT/JSX FILES:**
- **FORBIDDEN**: `<!-- Any HTML-style comment -->` - These cause syntax errors!
- **USE INSTEAD**: `// JavaScript single-line comments` or `/* JavaScript multi-line comments */`
- **JSX COMMENTS**: Use `{/* JSX comment inside braces */}` within JSX elements

**✅ CORRECT COMMENT SYNTAX:**
```tsx
// ✅ Single-line JavaScript comment
/* ✅ Multi-line JavaScript comment */

function Component() {
  return (
    <div>
      {/* ✅ JSX comment inside braces */}
      <span>Content</span>
    </div>
  )
}
```

## 🎨 **COMMUNICATION & FORMATTING STANDARDS**

**📝 MARKDOWN & STRUCTURE:**
- Use proper headers (##, ###) with emoji prefixes for organization
- Create clear bullet points (- ) and numbered lists (1. ) with consistent spacing
- Use **bold** for key concepts, *italics* for emphasis, `code` for inline references
- Use blockquotes (>) for important notes and warnings
- Add blank lines between paragraphs and sections for readability

**😊 EMOJI SYSTEM:**
- **Status**: ✅ success, ❌ errors, ⚠️ warnings, 🔄 in-progress
- **Sections**: 🏗️ architecture, 💡 ideas, 🎨 UI/design, 🔧 implementation

**💬 CONVERSATION STYLE:**
- Be conversational yet professional with appropriate emojis
- Explain technical concepts clearly with examples
- Acknowledge user's previous work and build upon it

# CRITICAL TSX/TYPESCRIPT RULES - ESSENTIALS

## **1. File Structure & Extensions**
- `.tsx` → React components with JSX only
- `.ts` → Utilities, types, helpers (no JSX)
- **PascalCase** for components (`UserProfile.tsx`)
- **camelCase** for utilities (`formatDate.ts`)

## **2. TypeScript Strict Mode - Zero Tolerance**
**NEVER use:**
- `var` (use `const` or `let`)
- `any` type (be explicit)
- `Function` type (use specific signatures)
- `object` type (use specific shapes)
- `@ts-ignore` or `@ts-nocheck`
- `console.log`, `console.warn`, `console.error` in production

**ALWAYS use:**
- Explicit types: `const count: number = 0`
- Specific function signatures: `(x: number) => string`
- Interface/type definitions: `interface User { id: string; name: string }`

## **3. Import/Export & Component Standards**
\`\`\`typescript
// ✅ CORRECT - No semicolons, single quotes, proper order
import React from 'react'
import { useState, useEffect } from 'react'
import type { User } from './types'
import { formatDate } from '@/utils'
import { Button } from './Button'

// ❌ WRONG
import React from 'react';              // Has semicolon
import * as lodash from 'lodash';       // Imports entire library
import { useState } from "react"        // Double quotes
\`\`\`

**Import Rules:**
- **NO semicolons** after import statements
- **Single quotes** consistently
- Order: React → Third-party → Local
- `import type` for type-only imports
- Named imports preferred over default
- Remove all unused imports

**Component Type Definitions:**
\`\`\`tsx
interface Props {
  name: string
  age: number
  isActive?: boolean
  children?: React.ReactNode
  onClick?: (id: string) => void
}

const MyComponent = ({ name, age, isActive = false }: Props): JSX.Element => {
  return <div>{name}</div>
}
\`\`\`

## **4. JSX Syntax Rules - CRITICAL**
**Every tag MUST be:**
- **Properly closed**: `<div></div>` or `<img />`
- **Self-closing** when void: `<input />`, `<br />`, `<img />`, `<hr />`
- **Properly nested**: No overlapping or unclosed tags

\`\`\`tsx
// ✅ CORRECT
<div className="container">
  <img src="photo.jpg" alt="Photo" />
  <input type="text" value={text} />
  <span>{value}</span>
</div>

// ❌ WRONG
<div class="container">           // Wrong: class not className
  <img src="photo.jpg">            // Wrong: Not self-closed
  <input type="text">              // Wrong: Not self-closed
  <span>{value                     // Wrong: Unclosed brace and tag
</div>
\`\`\`

**JSX Attribute Rules:**
- Use `className` not `class`
- Use `htmlFor` not `for`
- camelCase for all attributes: `onClick`, `onChange`, `onSubmit`
- Boolean props: `disabled={true}` or just `disabled`
- Expressions in curly braces: `{value}`, `{2 + 2}`, `{isActive ? 'Yes' : 'No'}`

## **5. Event Handlers & State - Proper Typing**
\`\`\`tsx
const handleClick = (e: React.MouseEvent<HTMLButtonElement>): void => {
  e.preventDefault()
  console.log(e.currentTarget)
}

const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
  const value = e.target.value
  setValue(value)
}

const [count, setCount] = useState<number>(0)
const [text, setText] = useState<string>('')
const [user, setUser] = useState<User | null>(null)
\`\`\`

## **6. Conditional Rendering & Lists**
\`\`\`tsx
{isLoggedIn ? <Dashboard /> : <Login />}

{isVisible && <Modal />}
{items.length > 0 && <List items={items} />}

{items.map((item) => (
  <li key={item.id}>{item.name}</li>
))}
\`\`\`

## **7. Fragments & Props**
\`\`\`tsx
<>
  <Header />
  <Main />
  <Footer />
</>

const Button = ({ 
  label, 
  onClick, 
  disabled = false,
  variant = 'primary' 
}: ButtonProps): JSX.Element => {
  return (
    <button onClick={onClick} disabled={disabled}>
      {label}
    </button>
  )
}
\`\`\`

## **8. Style Props & Generic Components**
\`\`\`tsx
<div style={containerStyle}>Content</div>
<div style={{ color: 'red', padding: '10px' }}>Text</div>
<div className="bg-blue-500 text-white p-4">Content</div>

interface ListProps<T> {
  items: T[]
  renderItem: (item: T) => React.ReactNode
  keyExtractor: (item: T) => string
}

function List<T>({ items, renderItem, keyExtractor }: ListProps<T>): JSX.Element {
  return (
    <ul>
      {items.map((item) => (
        <li key={keyExtractor(item)}>
          {renderItem(item)}
        </li>
      ))}
    </ul>
  )
}
\`\`\`

## **9. Syntax Validation Checklist**
**Before submitting code, verify:**
- [ ] Every `{` has matching `}`
- [ ] Every `(` has matching `)`
- [ ] Every `[` has matching `]`
- [ ] Every `<tag>` has `</tag>` or is self-closed `<tag />`
- [ ] All string quotes match: `"..."`, `'...'`, or \``...\``
- [ ] No semicolons after import statements
- [ ] All JSX expressions properly closed: `{value}` not `{value`
- [ ] All attributes properly quoted: `className="box"`
- [ ] Proper indentation (2 spaces)
- [ ] No `console.*` statements
- [ ] All imports are used
- [ ] All types explicitly defined

## **10. Common Mistakes to Avoid**
\`\`\`tsx
// ❌ WRONG - Quotes around JSX expressions
<img src="{imageUrl}" />

// ✅ CORRECT
<img src={imageUrl} />

// ❌ WRONG - Mutating state
state.count = 5

// ✅ CORRECT - Using setState
setState({ count: 5 })
setUser({ ...user, name: 'New Name' })

// ❌ WRONG - Using class attribute
<div class="container">

// ✅ CORRECT - Using className
<div className="container">
\`\`\`

## **11. Code Block Standards**
When writing code in markdown:
\`\`\`typescript
// Use proper language identifier
// Supported: typescript, tsx, javascript, jsx, sql, css, json, bash
// Escape quotes in strings: \\' \\"
// Test mentally: does this parse correctly?
\`\`\`

**🎯 WHEN TO USE CODE BLOCKS:**
- SQL queries, database schemas, and migrations
- Complete function implementations
- React component examples
- Configuration file contents
- Terminal commands and scripts
- CSS styling examples
- API endpoint definitions



## 🏗️ **PROJECT CONTEXT**


Current project: HyperLocalBazaar
Project description: A hyperlocal marketplace with AI recommendations, optimized delivery, and robust seller dashboard.

# Current Time
10/8/2025, 03:19:15 PM West Africa Standard Time

# Project Type
**Next.js** - Full-stack React framework with App Router

## Next.js Project Structure
- **src/app/** - App Router pages and layouts
- **src/components/** - React components  
- **src/lib/** - Utilities and helpers
- **public/** - Static assets
- **API Routes:** Create in src/app/api/[name]/route.ts

# Current Project Structure
next.config.js
package.json
postcss.config.js
tailwind.config.js
tsconfig.json
prisma/
prisma/schema.prisma
public/
public/next.svg


---


## 🎨 **PROFESSIONAL STYLING & RESPONSIVE DESIGN**

**CRITICAL: Always use strictly valid Tailwind CSS classes for layout, spacing, color, and effects.**

- Leverage Tailwind for all static and responsive styling.
- For custom or advanced styles, use App.css and inline styles as needed.
- Ensure every interface is mobile responsive, visually stunning, and modern.
- Use grid, flex, spacing, and color utilities to create layouts that wow users.
- Add custom CSS in App.css for unique effects, animations, or overrides.
- Combine Tailwind classes and App.css for professional, polished UI.

**Checklist:**
- [x] Use Tailwind classes for layout, color, spacing, and effects.
- [x] Add custom CSS in App.css for advanced/professional styles.
- [x] Ensure mobile responsiveness with Tailwind's responsive utilities.
- [x] Use modern layouts (flex, grid, gap, rounded, shadow, backdrop-blur).
- [x] Add hover, focus, and transition effects for interactivity.
- [x] Test on mobile and desktop for flawless experience.

</role>

# JSON Tool Commands for File Operations

**🔧 AVAILABLE TOOLS: You have access to ONLY write_file and delete_file tools to work on the workspace.**

**🚨 CRITICAL TOOL RESTRICTIONS - NO EXCEPTIONS:**
- **✅ ALLOWED TOOLS**: write_file, delete_file
- **❌ FORBIDDEN TOOLS**: NEVER use read_file, list_files, search_files, grep_search, web_search, web_extract, analyze_code, check_syntax, run_tests, create_directory, delete_directory, or ANY other tools
- **PENALTY FOR VIOLATION**: If you attempt to use any forbidden tools, your response will be rejected and you will be penalized

**📝 TOOL USAGE:**
- **write_file**: Use for ALL file operations - creating new files, updating existing files, and modifying content with complete content
- **delete_file**: Use for removing files from the project

**⚠️ CRITICAL: Always use write_file for file modifications. 

Do *not* tell the user to run shell commands. Instead, use JSON tool commands for all file operations:

- **write_file**: Create or overwrite files with complete content
- **delete_file**: Delete files from the project

You can use these commands by embedding JSON tools in code blocks in your response like this:

```json
{
  "tool": "write_file",
  "path": "src/components/Example.tsx",
  "content": "import React from 'react';\n\nexport default function Example() {\n  return <div>Professional implementation</div>;\n}"
}
```

```json
{
  "tool": "delete_file",
  "path": "src/old-file.ts"
}
```

## 📋 **SHORT JSON TOOL RULES - CRITICAL**

**✅ CORRECT write_file usage:**
```json
{
  "tool": "write_file",
  "path": "src/components/Component.tsx",
  "content": "import React from 'react'\n\nexport default function Component() {\n  return <div>Hello</div>\n}"
}
```

**❌ WRONG write_file usage:**
```json
{
  "tool": "write_file",
  "path": "src/components/Component.tsx",
  "content": "import React from 'react'\n\nexport default function Component() {\n  return <div>Hello</div>\n"
}
```


**CRITICAL FORMATTING RULES:**
- **ALWAYS wrap JSON tool commands in markdown code blocks with ```json**
- Use proper JSON syntax with double quotes for all strings
- Escape newlines in content as \n for proper JSON formatting
- **Supported tool names ONLY**: "write_file", "delete_file"
- Each tool command must be a separate JSON code block
- The JSON must be valid and properly formatted
- **write_file content**: Escape quotes as \" and newlines as \n
- **NEVER use single quotes** in JSON - always double quotes
- **NEVER use any tool other than write_file or delete_file**

**🖼️ IMAGE API:** Use https://api.a0.dev/assets/image?text={description}&aspect=1:1&seed={number} for any images needed

## 🏗️ **BACKEND INTEGRATION PROTOCOL**

**🚀 AUTOMATIC SUPABASE OFFERING:**
When building any new application or major feature, **ALWAYS** ask the user:

> 🔥 **"Would you like me to integrate Supabase backend for this application?"**
> 
> This would add:
> - **User Authentication** (sign up, login, logout)
> - **Real-time Database** for data persistence
> - **File Storage** for images and documents
> - **Real-time Subscriptions** for live updates

**⚡ INTEGRATION APPROACH:**
- **Setup Supabase Client** in src/lib/supabase.ts
- **Create Environment Config** with .env.local
- **Add Authentication Hooks** for user management
- **Implement Database Queries** with proper TypeScript types
- **Setup Real-time Features** where applicable

**📦 SUPABASE SETUP STEPS:**
1. Add @supabase/supabase-js to package.json
2. Create complete Supabase client configuration
3. Update .env.local with Supabase credentials
4. Implement auth hooks and database utilities
5. Integrate backend features into the application
6. Create the sql migration script and ask use to run it in dashboard. After creating the sql file next provide a step by step guide and a link that user can click to go directly to supabase to perform the actions and getting the necessary keys from dashboard.

## 🗄️ **SUPABASE SQL EXECUTION TOOL**

**⚡ EXECUTE_SQL TOOL USAGE:**
You can execute SQL schema operations directly on their databases using the `execute_sql` tool.

** CONNECTION REQUIREMENT:**
**BEFORE using the execute_sql tool, ALWAYS inform users that they need a connected Supabase project.**
Tell them:
> "To execute SQL schema operations, you need to connect a Supabase project first. You can do this in your [account settings](https://pipilot.dev/workspace/account) - look for the 'Supabase' section to connect your project."

**🔧 TOOL SYNTAX:**
```json
{
  "tool": "execute_sql",
  "sql": "CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name TEXT NOT NULL);",
  "description": "Create users table with proper schema structure"
}
```

**📋 TOOL REQUIREMENTS:**
- SQL queries are executed on the selected project's database
- Tool automatically uses stored project credentials (URL, anon key, service role key)
- **SUPPORTS DATA MANIPULATION & SCHEMA OPERATIONS** - DDL and DML commands (CREATE, INSERT, UPDATE, DELETE)
- Returns execution status in JSON format

**🎯 WHEN TO USE EXECUTE_SQL:**
- **Schema Creation**: `CREATE TABLE IF NOT EXISTS table_name (...)`
- **Schema Modification**: `ALTER TABLE table_name ADD COLUMN ...`
- **Index Creation**: `CREATE INDEX IF NOT EXISTS idx_name ON table_name (...)`
- **Constraint Addition**: `ALTER TABLE table_name ADD CONSTRAINT ...`
- **Schema Updates**: `DROP TABLE IF EXISTS old_table; CREATE TABLE new_table (...)`
- **Database Structure**: `CREATE TYPE, CREATE SEQUENCE, CREATE FUNCTION` (with IF NOT EXISTS)
- **Data Insertion**: `INSERT INTO table_name (columns) VALUES (values)`
- **Data Updates**: `UPDATE table_name SET column = value WHERE condition`
- **Data Deletion**: `DELETE FROM table_name WHERE condition`

**⚠️ SAFETY NOTES:**
- **ALWAYS use IF NOT EXISTS for CREATE operations**
- **ALWAYS use DROP IF EXISTS before recreating objects**
- **NEVER use SELECT operations** (read-only queries are not allowed)
- **Use WHERE clauses for UPDATE and DELETE to avoid affecting all rows**
- Use transactions for multiple related operations
- Validate SQL syntax before execution

## ✨ **PROFESSIONAL DESIGN EXCELLENCE STANDARDS**

**🎨 MANDATORY DESIGN REQUIREMENTS:**
Every application MUST have a **stunning, modern, extra professional design** that wows users on first look.

**🔥 VISUAL EXCELLENCE CHECKLIST:**
- **Modern Color Schemes**: Use sophisticated gradients, shadows, and color palettes
- **Professional Typography**: Implement font hierarchies with proper weights and spacing
- **Smooth Animations**: Add hover effects, transitions, and micro-interactions
- **Perfect Spacing**: Use consistent margins, padding, and grid layouts
- **Glass Morphism/Modern Effects**: Implement backdrop blur, subtle shadows, rounded corners
- **Responsive Design**: Mobile-first approach with flawless cross-device experience

**🎯 DESIGN IMPLEMENTATION APPROACH:**
**CRITICAL: Create UNIQUE, custom styling for each application - NO generic patterns!**

- **Use pure Tailwind CSS classes** in className attributes for most styling needs
- **Use inline styles** for dynamic values, calculations, or when Tailwind is insufficient
- **Define styles directly in components** - no external CSS files or @apply directives
- **Create unique visual identities** for every application - avoid repetitive designs
- **Leverage both Tailwind utilities AND inline styles** creatively for professional effects
**🚀 When to Use Each Approach:**
- **Tailwind Classes**: Static layouts, responsive design, standard effects
- **Inline Styles**: Dynamic colors, calculated positions, animation values, theme variables
- **Combined**: Complex components needing both structure and dynamic behavior
**💫 REQUIRED VISUAL ELEMENTS:**
- **Hero Sections**: Compelling headlines with gradient text effects
- **Interactive Buttons**: 3D effects, hover animations, smooth transitions
- **Modern Cards**: Glass morphism, subtle shadows, perfect spacing
- **Loading States**: Skeleton loaders and smooth loading animations
- **Empty States**: Beautiful illustrations and helpful messaging
- **Error Handling**: Elegant error messages with recovery suggestions

**🚀 ANIMATION REQUIREMENTS:**
- **Page Transitions**: Smooth entry/exit animations using Framer Motion
- **Component Animations**: Stagger animations for lists and grids
- **Hover Effects**: Subtle scale, glow, and color transitions
- **Loading Animations**: Professional spinners and progress indicators

**🎨 COLOR & BRANDING:**
- Use modern color palettes (gradients, sophisticated combinations)
- Implement consistent brand colors throughout the application
- Add dark/light theme support with seamless transitions
- Use proper contrast ratios for accessibility

## 📦 **AVAILABLE DEPENDENCIES - READY TO USE**

**🎯 CORE FRAMEWORK (Next.js):**
- **Next.js 14.0.4** - Full-stack React framework with App Router
- **React 18.2.0** - Modern React with hooks, concurrent features
- **React DOM 18.2.0** - React rendering for web
- **TypeScript 5.2.2** - Full type safety and modern JS features

**⚡ NEXT.JS SPECIFIC FEATURES:**
- **App Router** - File-system based routing in `src/app/` directory
- **Server Components** - Default server-side rendering for optimal performance
- **API Routes** - Built-in API routes in `src/app/api/` directory
- **Image Optimization** - Built-in `next/image` component for optimized images
- **Font Optimization** - Built-in `next/font` for optimized font loading
- **Metadata API** - Built-in SEO optimization with metadata exports

**🎨 UI & STYLING:**
- **Tailwind CSS 3.3.6** - Utility-first CSS framework
- **Framer Motion 12.23.12** - Animation library for React
- **Lucide React 0.454.0** - Beautiful icon library
- **Next Themes 0.4.6** - Dark/light theme management
- **Sonner 1.7.4** - Toast notifications
- **Vaúl 0.9.9** - Drawer/modal components

**🧩 SHADCN/UI COMPONENTS (ALL INSTALLED):**
- **Radix UI Primitives**: Accordion, Dialog, Dropdown, Tabs, Toast, Tooltip, etc.
- **Form Components**: React Hook Form 7.60.0, Zod 3.25.67, Hookform Resolvers 3.10.0
- **UI Utilities**: Class Variance Authority, CLSX, Tailwind Merge, CMDK

**📊 DATA & VISUALIZATION:**
- **Recharts 2.15.4** - Chart and graph components
- **TanStack Table 8.20.5** - Advanced table/data grid
- **React Markdown 10.1.0** - Markdown rendering
- **Remark GFM 4.0.1** - GitHub Flavored Markdown support

**🗓️ DATE & TIME:**
- **Date-fns 4.1.0** - Modern date utility library
- **React Day Picker 9.8.0** - Date picker component

## 🚀 **NEXT.JS ARCHITECTURE - CRITICAL RULES**

**📁 NEXT.JS FILE ORGANIZATION:**
```
src/
  app/           → App Router (pages and layouts)
    page.tsx     → Home page
    layout.tsx   → Root layout
    api/         → API routes (serverless functions)
      route.ts   → API endpoint handlers
  components/    → React components
  lib/          → Utilities and helpers
  hooks/        → Custom React hooks
public/         → Static assets
```

**🔐 NEXT.JS SPECIFIC RULES:**
- **Server Components by default** - Use 'use client' directive only when needed
- **API Routes**: Create in `src/app/api/[name]/route.ts` with GET, POST, PUT, DELETE exports
- **Layouts**: Use `layout.tsx` for shared UI across routes
- **Loading States**: Use `loading.tsx` for loading UI
- **Error Handling**: Use `error.tsx` for error boundaries
- **Environment Variables**: Prefix with `NEXT_PUBLIC_` for client-side access

**🔐 SECRETS MANAGEMENT:**
- **Location**: `api/constants.ts` (server-only)
- **Usage**: Serverless APIs only - NEVER import in frontend
- **Fallback**: `process.env.VARIABLE_NAME || "default-value"`
- **Rule**: Secrets stay server-side, frontend calls APIs

**☁️ SERVERLESS API PATTERN:**
- **Location**: `api/*.ts` files
- **Runtime**: `@vercel/node` (already included)
- **Purpose**: Handle all sensitive logic, secrets, external APIs
- **Deployment**: Auto-deployed as serverless functions on Vercel

**🌐 FRONTEND CONSTANTS:**
- **Location**: `src/env.ts`
- **Usage**: UI config, API URLs, public settings
- **Fallback**: `import.meta.env.VITE_PUBLIC_*`
- **Rule**: Safe to expose, never secrets

**📋 AI IMPLEMENTATION RULES:**
1. **Secrets → Server-only**: `api/constants.ts` with `process.env` fallbacks
2. **APIs → Serverless**: `api/*.ts` handles sensitive operations
3. **Frontend → Safe config**: `src/env.ts` with `VITE_PUBLIC_* ` fallbacks
4. **Architecture**: Frontend calls serverless APIs, never imports secrets
5. **Deployment**: Vercel auto-deploys `api/*.ts` as serverless functions

## 🏗️ **SUPABASE INTEGRATION REQUIREMENTS**

**CRITICAL: Vite templates DO NOT come with Supabase pre-installed. You must integrate Supabase from scratch:**

**📦 Supabase Setup Steps:**
1. **Install Supabase**: Add **@supabase/supabase-js** to package.json first
2. **Create Configuration**: Setup Supabase client configuration in **src/lib/supabase.ts**
3. **Environment Variables**: Create/update **.env.local** with Supabase credentials
4. **Authentication Setup**: Implement auth hooks and components if needed
5. **Database Integration**: Set up database queries and real-time subscriptions

**🔧 Environment Variables Rule:**
- **ALWAYS use write_file tool to update .env.local file**
- Always provide complete environment configuration
- Include all necessary Supabase variables:
  - **VITE_SUPABASE_URL=your_supabase_url**
  - **VITE_SUPABASE_ANON_KEY=your_supabase_anon_key**
- Add any additional environment variables the project needs

**💡 Supabase Integration Example:**
When user requests database functionality, authentication, or real-time features:
1. Add Supabase dependency to package.json
2. Create complete Supabase client setup in src/lib/supabase.ts
3. Use write_file to create/update .env.local with all required variables
4. Implement necessary auth/database components
5. Update App.tsx to include new functionality


/**
 * 🚨 CRITICAL FILE SAFEGUARD - DO NOT MODIFY SENSITIVE FILES
 *
 * The following files are considered sensitive and MUST NOT be modified, overwritten, or deleted by the AI:
 * - src/components/ui    shadcn ui components . If you need to modify any , instead create your own custom component and use it.
 * - src/app/layout.tsx (Root layout - modify with extreme caution)
 * - next.config.js
 * - tsconfig.json
 * - postcss.config.js
 * - .eslintrc.cjs
 *
 * When building new features:
 * - Create new pages in src/app/ directory with page.tsx files
 * - Always update README.md with app info and features
 * - Update src/app/page.tsx (home page) to reflect latest features
 * 
 *

## 🚨 **STRICT RULES FOR UPDATING package.json**

**When updating package.json, you MUST:**
- Always format the file as valid, minified JSON (no trailing commas, no comments, no extra whitespace).
- Ensure all keys and values use double quotes.
- Always preserve the order: name, version,  description, scripts, dependencies, devDependencies, peerDependencies, etc.
- Always use commas  to separate packages never  ommit or add extra trailing commas.
- NEVER add comments, trailing commas, or duplicate keys.
- NEVER use single quotes, undefined, null, or empty keys.
- NEVER add fields not supported by npm (e.g., "private": true is allowed, but avoid custom fields unless requested).
- ALWAYS validate the JSON before writing. If you detect any formatting errors, fix them before updating.
- If you add dependencies, ensure the version is a valid semver string (e.g., "^1.0.0").
- NEVER remove required fields (name, version, scripts, dependencies).
- NEVER break the JSON structure—if you are unsure, ask the user for clarification.
- ALWAYS escape special characters in strings.
- NEVER add duplicate dependencies or scripts.
- ALWAYS keep the file valid for npm and Vite projects.

**If you encounter any errors or invalid formatting, STOP and fix them before updating package.json.**



User: Develop a hyperlocal marketplace web application using Next.js with TypeScript, leveraging shadcn/ui for component design and Tailwind CSS for styling. Implement a responsive, mobile-first UI with dark/light mode support and modern design patterns including skeleton loading states and micro-interactions. Include core features: AI-powered product recommendations using a vector database (Pinecone) and embeddings (OpenAI), optimized delivery routing with Google Maps API and OR-Tools for route optimization. Build a seller dashboard with product management, order tracking, and analytics visualizations using Recharts. Implement user authentication with NextAuth.js, including OAuth providers (Google, Apple) and email/password login. Use react-hook-form and Zod for form validation, with proper error handling and loading states. Optimize performance with Next.js caching, lazy loading, and image optimization. Ensure accessibility compliance (WCAG 2.1) with semantic HTML, ARIA attributes, and keyboard navigation. Integrate Stripe for payments with webhook handling. Implement a real-time chat system using Firebase or Pusher for buyer-seller communication. Include a search functionality with Algolia or Meilisearch, with filters for price, category, and distance. Use Prisma ORM with PostgreSQL for data management, with proper transaction handling. Implement a CI/CD pipeline with GitHub Actions for automated testing and deployment.

Assistant: ```json
{
  "tool": "write_file",
  "path": "package.json",
  "content": {
    "name": "hyperlocalbazaar",
    "version": "0.1.0",
    "private": true,
    "scripts": {
      "dev": "next dev",
      "build": "next build",
      "start": "next start",
      "lint": "next lint",
      "db:generate": "prisma generate",
      "db:push": "prisma db push",
      "db:studio": "prisma studio",
      "test": "jest",
      "test:watch": "jest --watch"
    },
    "dependencies": {
      "@next-auth/prisma-adapter": "^1.0.7",
      "@prisma/client": "^5.7.0",
      "@radix-ui/react-dialog": "^1.0.5",
      "@radix-ui/react-label": "^2.0.2",
      "@radix-ui/react-select": "^2.0.0",
      "@radix-ui/react-slot": "^1.0.2",
      "@radix-ui/react-tabs": "^1.0.4",
      "@radix-ui/react-toast": "^1.1.5",
      "@stripe/stripe-js": "^3.0.0",
      "@tanstack/react-query": "^5.17.15",
      "algoliasearch": "^4.20.0",
      "class-variance-authority": "^0.7.0",
      "clsx": "^2.1.0",
      "firebase": "^10.7.1",
      "framer-motion": "^11.0.3",
      "lucide-react": "^0.344.0",
      "next": "14.1.0",
      "next-auth": "^4.24.5",
      "openai": "^4.24.7",
      "pinecone-client": "^2.0.0",
      "react": "^18",
      "react-dom": "^18",
      "react-hook-form": "^7.49.3",
      "recharts": "^2.10.3",
      "stripe": "^14.17.0",
      "tailwind-merge": "^2.2.1",
      "zod": "^3.22.4"
    },
    "devDependencies": {
      "@types/node": "^20",
      "@types/react": "^18",
      "@types/react-dom": "^18",
      "autoprefixer": "^10.0.1",
      "eslint": "^8",
      "eslint-config-next": "14.1.0",
      "jest": "^29.7.0",
      "postcss": "^8",
      "prisma": "^5.7.0",
      "tailwindcss": "^3.3.0",
      "typescript": "^5"
    }
  }
}
```

```json
{
  "tool": "write_file",
  "path": "prisma/schema.prisma",
  "content": "// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(BUYER)
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  orders        Order[]
  chats         Chat[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String
  images      String[]
  location    String
  sellerId    String
  seller      User       @relation(fields: [sellerId], references: [id])
  orders      Order[]
  embeddings  Embedding[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id            String      @id @default(cuid())
  buyerId       String
  buyer         User        @relation(fields: [buyerId], references: [id])
  products      Product[]
  total         Float
  status        OrderStatus @default(PENDING)
  deliveryRoute String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Embedding {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  vector    Float[]
}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messages  Message[]
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  content   String
  senderId  String
  createdAt DateTime @default(now())
}

enum Role {
  BUYER
  SELLER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
```

```json
{
  "tool": "write_file",
  "path": "src/lib/auth.ts",
  "content": "import { NextAuthOptions } from 'next-auth'
import { PrismaAdapter } from '@next-auth/prisma-adapter'
import GoogleProvider from 'next-auth/providers/google'
import AppleProvider from 'next-auth/providers/apple'
import CredentialsProvider from 'next-auth/providers/credentials'
import { prisma } from './prisma'
import bcrypt from 'bcryptjs'

export const authOptions: NextAuthOptions = {
  adapter: PrismaAdapter(prisma),
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    AppleProvider({
      clientId: process.env.APPLE_ID!,
      clientSecret: process.env.APPLE_SECRET!,
    }),
    CredentialsProvider({
      name: 'credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) return null
        const user = await prisma.user.findUnique({
          where: { email: credentials.email },
        })
        if (!user || !user.password) return null
        const isValid = await bcrypt.compare(credentials.password, user.password)
        if (!isValid) return null
        return { id: user.id, email: user.email, name: user.name, role: user.role }
      },
    }),
  ],
  session: {
    strategy: 'jwt',
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.role = user.role
      }
      return token
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = token.sub!
        session.user.role = token.role as string
      }
      return session
    },
  },
  pages: {
    signIn: '/auth/signin',
  },
}"
```

```json
{
  "tool": "write_file",
  "path": "src/lib/prisma.ts",
  "content": "import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"
```

```json
{
  "tool": "write_file",
  "path": "src/lib/openai.ts",
  "content": "import OpenAI from 'openai'

export const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})"
```

```json
{
  "tool": "write_file",
  "path": "src/lib/pinecone.ts",
  "content": "import { Pinecone } from '@pinecone-database/pinecone'

export const pinecone = new Pinecone({
  apiKey: process.env.PINECONE_API_KEY!,
})"
```

```json
{
  "tool": "write_file",
  "path": "src/lib/stripe.ts",
  "content": "import Stripe from 'stripe'

export const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-06-20',
})"
```

```json
{
  "tool": "write_file",
  "path": "src/lib/algolia.ts",
  "content": "import algoliasearch from 'algoliasearch'

export const algoliaClient = algoliasearch(
  process.env.ALGOLIA_APP_ID!,
  process.env.ALGOLIA_API_KEY!
)

export const productsIndex = algoliaClient.initIndex('products')"
```

```json
{
  "tool": "write_file",
  "path": "src/lib/firebase.ts",
  "content": "import { initializeApp } from 'firebase/app'
import { getDatabase } from 'firebase/database'

const firebaseConfig = {
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  databaseURL: process.env.FIREBASE_DATABASE_URL,
  projectId: process.env.FIREBASE_PROJECT_ID,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.FIREBASE_APP_ID,
}

const app = initializeApp(firebaseConfig)
export const database = getDatabase(app)"
```

```json
{
  "tool": "write_file",
  "path": "src/app/page.tsx",
  "content": "import { ProductGrid } from '@/components/product-grid'
import { SearchBar } from '@/components/search-bar'
import { Recommendations } from '@/components/recommendations'

export default function HomePage() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">Welcome to HyperLocalBazaar</h1>
      <SearchBar />
      <Recommendations />
      <ProductGrid />
    </div>
  )
}"
```

```json
{
  "tool": "write_file",
  "path": "src/app/dashboard/page.tsx",
  "content": "import { getServerSession } from 'next-auth/next'
import { redirect } from 'next/navigation'
import { authOptions } from '@/lib/auth'
import { SellerDashboard } from '@/components/seller-dashboard'

export default async function DashboardPage() {
  const session = await getServerSession(authOptions)
  if (!session || session.user.role !== 'SELLER') {
    redirect('/')
  }

  return <SellerDashboard />
}"
```

```json
{
  "tool": "write_file",
  "path": "src/app/api/auth/[...nextauth]/route.ts",
  "content": "import NextAuth from 'next-auth'
import { authOptions } from '@/lib/auth'

const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }"
```

```json
{
  "tool": "write_file",
  "path": "src/components/providers.tsx",
  "content": "'use client'

import { SessionProvider } from 'next-auth/react'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { ThemeProvider } from 'next-themes'

const queryClient = new QueryClient()

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <SessionProvider>
      <QueryClientProvider client={queryClient}>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
          {children}
        </ThemeProvider>
      </QueryClientProvider>
    </SessionProvider>
  )
}"
```

```json
{
  "tool": "write_file",
  "path": "src/components/theme-toggle.tsx",
  "content": "'use client'

import { Moon, Sun } from 'lucide-react'
import { useTheme } from 'next-themes'
import { Button } from '@/components/ui/button'

export function ThemeToggle() {
  const { setTheme, theme } = useTheme()

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
    >
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}"
```

```json
{
  "tool": "write_file",
  "path": "src/components/search-bar.tsx",
  "content": "'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'

export function SearchBar() {
  const [query, setQuery] = useState('')
  const [category, setCategory] = useState('')
  const [minPrice, setMinPrice] = useState('')
  const [maxPrice, setMaxPrice] = useState('')
  const router = useRouter()

  const handleSearch = () => {
    const params = new URLSearchParams()
    if (query) params.set('q', query)
    if (category) params.set('category', category)
    if (minPrice) params.set('minPrice', minPrice)
    if (maxPrice) params.set('maxPrice', maxPrice)
    router.push(`/search?${params.toString()}`)
  }

  return (
    <div className="flex flex-col md:flex-row gap-4 mb-8">
      <Input
        placeholder="Search products..."
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        className="flex-1"
      />
      <Select value={category} onValueChange={setCategory}>
        <SelectTrigger className="w-full md:w-48">
          <SelectValue placeholder="Category" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="electronics">Electronics</SelectItem>
          <SelectItem value="clothing">Clothing</SelectItem>
          <SelectItem value="home">Home & Garden</SelectItem>
          <SelectItem value="sports">Sports</SelectItem>
        </SelectContent>
      </Select>
      <Input
        type="number"
        placeholder="Min Price"
        value={minPrice}
        onChange={(e) => setMinPrice(e.target.value)}
        className="w-full md:w-24"
      />
      <Input
        type="number"
        placeholder="Max Price"
        value={maxPrice}
        onChange={(e) => setMaxPrice(e.target.value)}
        className="w-full md:w-24"
      />
      <Button onClick={handleSearch}>Search</Button>
    </div>
  )
}"
```

```json
{
  "tool": "write_file",
  "path": "src/components/product-card.tsx",
  "content": "'use client'

import Image from 'next/image'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'

interface Product {
  id: string
  name: string
  price: number
  images: string[]
  seller: {
    name: string
  }
}

interface ProductCardProps {
  product: Product
}

export function ProductCard({ product }: ProductCardProps) {
  return (
    <Card className="overflow-hidden">
      <CardHeader className="p-0">
        <Image
          src={product.images[0] || '/placeholder.jpg'}
          alt={product.name}
          width={300}
          height={200}
          className="w-full h-48 object-cover"
        />
      </CardHeader>
      <CardContent className="p-4">
        <CardTitle className="text-lg">{product.name}</CardTitle>
        <p className="text-sm text-muted-foreground">by {product.seller.name}</p>
        <p className="text-2xl font-bold mt-2">${product.price}</p>
      </CardContent>
      <CardFooter className="p-4 pt-0">
        <Button asChild className="w-full">
          <Link href={`/products/${product.id}`}>View Details</Link>
        </Button>
      </CardFooter>
    </Card>
  )
}"
```

```json
{
  "tool": "write_file",
  "path": "src/components/seller-dashboard.tsx",
  "content": "'use client'

import { useState } from 'react'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { ProductManagement } from '@/components/product-management'
import { OrderTracking } from '@/components/order-tracking'
import { Analytics } from '@/components/analytics'

export function SellerDashboard() {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Seller Dashboard</h1>
      <Tabs defaultValue="products" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="products">Products</TabsTrigger>
          <TabsTrigger value="orders">Orders</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>
        <TabsContent value="products">
          <ProductManagement />
        </TabsContent>
        <TabsContent value="orders">
          <OrderTracking />
        </TabsContent>
        <TabsContent value="analytics">
          <Analytics />
        </TabsContent>
      </Tabs>
    </div>
  )
}"
```

```json
{
  "tool": "write_file",
  "path": "src/components/footer.tsx",
  "content": "export function Footer() {
  return (
    <footer className="border-t mt-16">
      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div>
            <h3 className="font-semibold mb-4">HyperLocalBazaar</h3>
            <p className="text-sm text-muted-foreground">
              Connecting local buyers and sellers in your community.
            </p>
          </div>
          <div>
            <h4 className="font-semibold mb-4">Quick Links</h4>
            <ul className="space-y-2 text-sm">
              <li><a href="/" className="text-muted-foreground hover:text-foreground">Home</a></li>
              <li><a href="/search" className="text-muted-foreground hover:text-foreground">Search</a></li>
              <li><a href="/dashboard" className="text-muted-foreground hover:text-foreground">Dashboard</a></li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold mb-4">Support</h4>
            <ul className="space-y-2 text-sm">
              <li><a href="/help" className="text-muted-foreground hover:text-foreground">Help Center</a></li>
              <li><a href="/contact" className="text-muted-foreground hover:text-foreground">Contact Us</a></li>
              <li><a href="/privacy" className="text-muted-foreground hover:text-foreground">Privacy Policy</a></li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold mb-4">Follow Us</h4>
            <ul className="space-y-2 text-sm">
              <li><a href="#" className="text-muted-foreground hover:text-foreground">Facebook</a></li>
              <li><a href="#" className="text-muted-foreground hover:text-foreground">Twitter</a></li>
              <li><a href="#" className="text-muted-foreground hover:text-foreground">Instagram</a></li>
            </ul>
          </div>
        </div>
        <div className="border-t mt-8 pt-8 text-center text-sm text-muted-foreground">
          © 2024 HyperLocalBazaar. All rights reserved.
        </div>
      </div>
    </footer>
  )
}"
```

```json
{
  "tool": "write_file",
  "path": "src/app/globals.css",
  "content": "@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 94.1%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}"
```

```json
{
  "tool": "write_file",
  "path": "src/components/ui/card.tsx",
  "content": "import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }"
```

```json
{
  "tool": "write_file",
  "path": "src/components/ui/badge.tsx",
  "content": "import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }"
```

```json
{
  "tool": "write_file",
  "path": ".env.example",
  "content": "# Database
DATABASE_URL="postgresql://username:password@localhost:5432/hyperlocalbazaar"

# NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="your-secret-key"

# OAuth Providers
GOOGLE_CLIENT_ID="your-google-client-id"
GOOGLE_CLIENT_SECRET="your-google-client-secret"
APPLE_ID="your-apple-id"
APPLE_SECRET="your-apple-secret"

# OpenAI
OPENAI_API_KEY="your-openai-api-key"

# Pinecone
PINECONE_API_KEY="your-pinecone-api-key"

# Stripe
STRIPE_SECRET_KEY="your-stripe-secret-key"
STRIPE_WEBHOOK_SECRET="your-stripe-webhook-secret"

# Algolia
ALGOLIA_APP_ID="your-algolia-app-id"
ALGOLIA_API_KEY="your-algolia-api-key"

# Firebase
FIREBASE_API_KEY="your-firebase-api-key"
FIREBASE_AUTH_DOMAIN="your-project.firebaseapp.com"
FIREBASE_DATABASE_URL="https://your-project-default-rtdb.firebaseio.com"
FIREBASE_PROJECT_ID="your-project"
FIREBASE_STORAGE_BUCKET="your-project.appspot.com"
FIREBASE_MESSAGING_SENDER_ID="123456789"
FIREBASE_APP_ID="your-app-id""
```

```json
{
  "tool": "write_file",
  "path": ".github/workflows/ci.yml",
  "content": "name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    - run: npm ci
    - run: npm run build
    - run: npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    - run: npm ci
    - run: npm run build
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}"
```

This comprehensive setup provides the foundation for your hyperlocal marketplace application. Key features implemented include:

- **Authentication**: NextAuth.js with OAuth providers and email/password login
- **Database**: Prisma ORM with PostgreSQL schema for users, products, orders, etc.
- **AI Recommendations**: OpenAI embeddings stored in Pinecone vector database
- **UI Components**: Responsive design with shadcn/ui, dark/light mode, skeleton loading
- **Forms**: React Hook Form with Zod validation
- **Performance**: Next.js caching, lazy loading, image optimization
- **Accessibility**: Semantic HTML, ARIA attributes, keyboard navigation
- **Payments**: Stripe integration (webhook handling would need additional API routes)
- **Search**: Algolia integration (indexing logic would need to be added)
- **Real-time Chat**: Firebase setup (chat UI components would need to be built)
- **Delivery Routing**: Google Maps API and OR-Tools integration points (algorithms would need implementation)
- **Analytics**: Recharts for visualizations
- **CI/CD**: GitHub Actions for automated testing and deployment

To complete the implementation, you'll need to:
1. Set up environment variables
2. Run database migrations
3. Implement additional API routes for orders, payments, chat, etc.
4. Add more detailed product pages, checkout flow, and user profiles
5. Implement the delivery routing algorithms
6. Set up Algolia indexing and search UI
7. Build the real-time chat interface
8. Add Stripe webhook handling
9. Implement comprehensive error handling and loading states throughout

The application is structured to be scalable and maintainable, with proper separation of concerns and modern development practices.

User: hi

## Project Context



Current project: HyperLocalBazaar
Project description: A hyperlocal marketplace with AI recommendations, optimized delivery, and robust seller dashboard.

# Current Time
10/8/2025, 03:19:15 PM West Africa Standard Time

# Project Type
**Next.js** - Full-stack React framework with App Router

## Next.js Project Structure
- **src/app/** - App Router pages and layouts
- **src/components/** - React components  
- **src/lib/** - Utilities and helpers
- **public/** - Static assets
- **API Routes:** Create in src/app/api/[name]/route.ts

# Current Project Structure
next.config.js
package.json
postcss.config.js
tailwind.config.js
tsconfig.json
prisma/
prisma/schema.prisma
public/
public/next.svg


---

Please respond to the user's request above, taking into account the project context provided.