{"tool": "write_file", "path": "package.json", "content": {
  "name": "uberclone",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.14",
    "eslint": "^8.45.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "postcss": "^8.4.27",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.0.2",
    "vite": "^4.4.5"
  }
}
File Created
(package.json)
Created
•
Completed
package.json • json
{
  "name": "uberclone",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.14",
    "eslint": "^8.45.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "postcss": "^8.4.27",
    "tailwindcss": "^3.3.3",
    "typescript": "^5.0.2",
    "vite": "^4.4.5"
  }
}
```
```json
{"tool": "write_file", "path": "src/lib/supabase.ts", "content": "import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || ''
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || ''

export const supabase = createClient(supabaseUrl, supabaseAnonKey)"}
```
```json
{"tool": "write_file", "path": ".env.local", "content": "VITE_SUPABASE_URL=your-supabase-project-url
VITE_SUPABASE_ANON_KEY=your-supabase-anon-key"}
```
```json
{"tool": "write_file", "path": "src/types/index.ts", "content": "export interface User {
  id: string
  email: string
  username: string
  avatar: string
  bio: string
  skills: string[]
  interests: string[]
  created_at: string
}

export interface Post {
  id: string
  user_id: string
  content: string
  image?: string
  created_at: string
  likes: number
  comments: Comment[]
}

export interface Comment {
  id: string
  post_id: string
  user_id: string
  content: string
  created_at: string
}

export interface Match {
  id: string
  user1_id: string
  user2_id: string
  compatibility_score: number
  matched_at: string
}"}
```
```json
{"tool": "write_file", "path": "src/components/Profile.tsx", "content": "import React from 'react'
import type { User } from '@/types'

interface ProfileProps {
  user: User
  isOwnProfile?: boolean
}

export const Profile: React.FC<ProfileProps> = ({ user, isOwnProfile }) => {
  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 max-w-md mx-auto">
      <div className="text-center">
        <img
          src={user.avatar}
          alt={`${user.username} avatar`}
          className="w-24 h-24 rounded-full mx-auto mb-4 border-4 border-gradient-to-r from-blue-500 to-purple-500"
        />
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">{user.username}</h2>
        <p className="text-gray-600 dark:text-gray-300 mt-2">{user.bio || 'No bio yet'}</p>
      </div>

      <div className="mt-6">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Skills</h3>
        <div className="flex flex-wrap gap-2">
          {user.skills.map((skill, index) => (
            <span
              key={index}
              className="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full text-sm"
            >
              {skill}
            </span>
          ))}
        </div>
      </div>

      <div className="mt-4">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Interests</h3>
        <div className="flex flex-wrap gap-2">
          {user.interests.map((interest, index) => (
            <span
              key={index}
              className="px-3 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 rounded-full text-sm"
            >
              {interest}
            </span>
          ))}
        </div>
      </div>

      {isOwnProfile && (
        <button className="mt-6 w-full px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:scale-105 transition-transform">
          Edit Profile
        </button>
      )}
    </div>
  )
}"}
```
```json
{"tool": "write_file", "path": "src/components/MatchmakingCard.tsx", "content": "import React from 'react'
import type { User } from '@/types'

interface MatchmakingCardProps {
  user: User
  compatibilityScore: number
  onMatch: () => void
}

export const MatchmakingCard: React.FC<MatchmakingCardProps> = ({ user, compatibilityScore, onMatch }) => {
  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 hover:shadow-xl transition-shadow">
      <div className="flex items-center space-x-4">
        <img
          src={user.avatar}
          alt={`${user.username} avatar`}
          className="w-16 h-16 rounded-full border-2 border-gray-300 dark:border-gray-600"
        />
        <div className="flex-1">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">{user.username}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-300">
            Compatibility: {Math.round(compatibilityScore)}%
          </p>
          <div className="flex flex-wrap gap-1 mt-1">
            {user.skills.slice(0, 3).map((skill, index) => (
              <span
                key={index}
                className="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded text-xs"
              >
                {skill}
              </span>
            ))}
          </div>
        </div>
        <button
          onClick={onMatch}
          className="px-4 py-2 bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-lg hover:scale-105 transition-transform"
        >
          Match
        </button>
      </div>
    </div>
  )
}"}
```
```json
{"tool": "write_file", "path": "src/components/AuthForm.tsx", "content": "import React, { useState } from 'react'
import { useAuth } from '@/hooks/useAuth'
import { useToast } from '@/hooks/useToast'

export const AuthForm: React.FC = () => {
  const [isSignUp, setIsSignUp] = useState(false)
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [username, setUsername] = useState('')
  const { signUp, signIn } = useAuth()
  const { toast } = useToast()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      if (isSignUp) {
        await signUp(email, password, username)
        toast({ title: 'Account created!', description: 'Welcome to GameDev Connect!' })
      } else {
        await signIn(email, password)
        toast({ title: 'Signed in!', description: 'Welcome back!' })
      }
    } catch (error) {
      toast({ title: 'Error', description: (error as Error).message, variant: 'destructive' })
    }
  }

  return (
    <div className="max-w-md mx-auto bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6">
      <h2 className="text-2xl font-bold text-center text-gray-900 dark:text-white mb-6">
        {isSignUp ? 'Join GameDev Connect' : 'Welcome Back'}
      </h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        {isSignUp && (
          <input
            type="text"
            placeholder="Username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
            required
          />
        )}
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
          required
        />
        <button
          type="submit"
          className="w-full px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:scale-105 transition-transform"
        >
          {isSignUp ? 'Sign Up' : 'Sign In'}
        </button>
      </form>
      <button
        onClick={() => setIsSignUp(!isSignUp)}
        className="w-full mt-4 text-blue-600 dark:text-blue-400 hover:underline"
      >
        {isSignUp ? 'Already have an account? Sign In' : "Don't have an account? Sign Up"}
      </button>
    </div>
  )
}"}
```
```json
{"tool": "write_file", "path": "src/components/Matchmaking.tsx", "content": "import React from 'react'
import { useMatchmaking } from '@/hooks/useMatchmaking'
import { useAuth } from '@/hooks/useAuth'
import { MatchmakingCard } from './MatchmakingCard'

export const Matchmaking: React.FC = () => {
  const { user } = useAuth()
  const { potentialMatches, loading, createMatch } = useMatchmaking(user)

  if (loading) {
    return <div className="text-center py-8">Loading potential matches...</div>
  }

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-3xl font-bold text-center text-gray-900 dark:text-white mb-8">
        Find Your GameDev Match
      </h1>
      <div className="space-y-4">
        {potentialMatches.map((matchUser) => (
          <MatchmakingCard
            key={matchUser.id}
            user={matchUser}
            compatibilityScore={calculateCompatibility(user!, matchUser)} // Reuse from hook
            onMatch={() => createMatch(matchUser.id)}
          />
        ))}
      </div>
    </div>
  )
}

function calculateCompatibility(user1: any, user2: any): number {
  const skillOverlap = user1.skills.filter((skill: string) => user2.skills.includes(skill)).length
  const interestOverlap = user1.interests.filter((interest: string) => user2.interests.includes(interest)).length
  return (skillOverlap * 20) + (interestOverlap * 15) + Math.random() * 10
}"}
```
```json
{"tool": "write_file", "path": "src/App.tsx", "content": "import React from 'react'
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'
import { ThemeProviderLogic } from '@/hooks/useTheme'
import { Toaster } from 'sonner'
import { AuthForm } from '@/components/AuthForm'
import { Profile } from '@/components/Profile'
import { Matchmaking } from '@/components/Matchmaking'
import { useAuth } from '@/hooks/useAuth'

const AppContent: React.FC = () => {
  const { user, loading } = useAuth()

  if (loading) {
    return <div className="flex items-center justify-center min-h-screen">Loading...</div>
  }

  if (!user) {
    return <AuthForm />
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <nav className="bg-white dark:bg-gray-800 shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-xl font-bold text-gray-900 dark:text-white">GameDev Connect</h1>
            </div>
            <div className="flex items-center space-x-4">
              <button className="text-gray-700 dark:text-gray-300 hover:text-blue-600">Feed</button>
              <button className="text-gray-700 dark:text-gray-300 hover:text-blue-600">Profile</button>
              <button className="text-gray-700 dark:text-gray-300 hover:text-blue-600">Matchmaking</button>
            </div>
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <Routes>
          <Route path="/" element={<Profile user={user} isOwnProfile />} />
          <Route path="/matchmaking" element={<Matchmaking />} />
          {/* Add more routes as needed */}
        </Routes>
      </main>
    </div>
  )
}

export const App: React.FC = () => {
  return (
    <Router>
      <ThemeProviderLogic>
        <AppContent />
        <Toaster />
      </ThemeProviderLogic>
    </Router>
  )
}"}
```
```json
{"tool": "write_file", "path": "README.md", "content": "# GameDev Connect

A niche social network for indie game developers to connect, collaborate, and find their perfect match.

## Features

- **AI-Generated Profile Avatars**: Unique avatars generated for each user
- **Matchmaking System**: Find collaborators based on skills and interests
- **Social Feed**: Share game dev updates and connect with others
- **Dark/Light Theme**: Modern UI with theme switching
- **Responsive Design**: Works perfectly on mobile and desktop

## Tech Stack

- React 18 with TypeScript
- Vite for fast development
- Tailwind CSS for styling
- Supabase for backend (auth, database, real-time)
- Sonner for toast notifications

## Getting Started

1. Clone the repository
2. Install dependencies: `npm install`
3. Set up Supabase project and add credentials to `.env.local`
4. Run development server: `npm run dev`

## Database Schema

Create these tables in your Supabase dashboard:

```sql
-- Profiles table
CREATE TABLE profiles (
  id UUID REFERENCES auth.users PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  username TEXT UNIQUE NOT NULL,
  avatar TEXT,
  bio TEXT,
  skills TEXT[],
  interests TEXT[],
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Posts table
CREATE TABLE posts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES profiles(id),
  content TEXT NOT NULL,
  image TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  likes INTEGER DEFAULT 0
);

-- Matches table
CREATE TABLE matches (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user1_id UUID REFERENCES profiles(id),
  user2_id UUID REFERENCES profiles(id),
  compatibility_score FLOAT,
  matched_at TIMESTAMPTZ DEFAULT NOW()
);
```

## Contributing

Feel free to contribute to make GameDev Connect even better!"}
```
```json
{"tool": "write_file", "path": "index.html", "content": "<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GameDev Connect - Indie Game Developer Social Network</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>"}